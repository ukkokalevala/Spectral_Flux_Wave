// Spectral flux Beat Detection with ESP32-C3, Sound Sensor, and OLED

//In the beat detection code, 
//the "Now" and "Avg" values displayed on the OLED 
//represent the instantaneous energy and 
//average energy of the bass frequencies (0-200Hz).

//The system essentially implements a simplified version
// of the "spectral flux" 
// algorithm commonly used in professional audio analysis, 
// optimized for microcontroller constraints. 
// The auto-adjusting threshold makes it responsive 
// to dynamic volume changes while maintaining beat detection accuracy.

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <arduinoFFT.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SAMPLE_SIZE 256
#define SAMPLING_FREQ 5000


// Declare variables first
double vReal[SAMPLE_SIZE];
double vImag[SAMPLE_SIZE];

// Initialize FFT
ArduinoFFT<double> FFT(vReal, vImag, SAMPLE_SIZE, SAMPLING_FREQ);

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Audio processing variables
double energyHistory[20] = {0};
int energyIndex = 0;
float beatThreshold = 1.5;
float avgEnergy = 0;
unsigned int samplingPeriod;
unsigned long microSeconds;
const int soundSensorPin = 4; // GPIO4 (ADC1)

void setup() {
  Serial.begin(115200);
  Wire.begin(7, 6);
  // Initialize OLED
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println("Beat Detector");
  display.display();
  delay(1000);
  
  samplingPeriod = round(1000000 * (1.0 / SAMPLING_FREQ));
  analogReadResolution(12); // For ESP32-C3 ADC
}

void loop() {
  // 1. Sample audio
  for(int i = 0; i < SAMPLE_SIZE; i++) {
    microSeconds = micros();
    vReal[i] = analogRead(soundSensorPin);
    vImag[i] = 0;
    while(micros() < (microSeconds + samplingPeriod)) {}
  }

  // 2. Process FFT
  FFT.windowing(FFT_WIN_TYP_HAMMING, FFT_FORWARD);
  FFT.compute(FFT_FORWARD);
  FFT.complexToMagnitude();

  // 3. Calculate bass energy (0-200Hz)
  double energy = 0;
  int bassBin = (200 * SAMPLE_SIZE) / SAMPLING_FREQ;
  for(int i = 2; i <= bassBin; i++) {
    energy += vReal[i];
  }

  // 4. Update energy history
  energyHistory[energyIndex] = energy;
  energyIndex = (energyIndex + 1) % 20;
  
  // 5. Calculate moving average
  avgEnergy = 0;
  for(int i = 0; i < 20; i++) {
    avgEnergy += energyHistory[i];
  }
  avgEnergy /= 20;

  // 6. Beat detection
  bool beatDetected = (energy > avgEnergy * beatThreshold);

  // 7. Update display
  display.clearDisplay();
  
  // Show energy levels
  display.setCursor(0,0);
  display.print("Now:"); display.print((int)energy);
  display.print(" Avg:"); display.print((int)avgEnergy);
  
  // Visualize beat
  if(beatDetected) {
    display.fillRect(0, 15, SCREEN_WIDTH, 10, SSD1306_WHITE);
    display.setCursor(0, 30);
    display.print("BEAT!");
    
    // Adjust threshold dynamically
    beatThreshold = beatThreshold * 0.9 + 0.1 * (energy / avgEnergy);
  } else {
    beatThreshold = beatThreshold * 0.98 + 0.02 * 1.5;
  }
  
  // Frequency spectrum visualization
  for(int i = 1; i <= 30; i++) { // Show first 30 bins
    int barHeight = constrain((int)vReal[i]/20, 0, 30);
    display.fillRect(i*4, SCREEN_HEIGHT-barHeight, 3, barHeight, SSD1306_WHITE);
  }
  
  display.display();
  delay(20);
}
